WARNING:__main__:
*****************************************
Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
*****************************************
/u/ssoma1/mahdi/Torch-Pruning/scripts/finetune_pruned_resnet.py:37: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model = torch.load(args.model_path, map_location='cpu')
/u/ssoma1/mahdi/Torch-Pruning/scripts/finetune_pruned_resnet.py:37: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model = torch.load(args.model_path, map_location='cpu')
/u/ssoma1/mahdi/Torch-Pruning/scripts/finetune_pruned_resnet.py:37: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model = torch.load(args.model_path, map_location='cpu')
/u/ssoma1/mahdi/Torch-Pruning/scripts/finetune_pruned_resnet.py:37: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model = torch.load(args.model_path, map_location='cpu')
/u/ssoma1/mahdi/Torch-Pruning/scripts/finetune_pruned_resnet.py:48: FutureWarning: `torch.cuda.amp.GradScaler(args...)` is deprecated. Please use `torch.amp.GradScaler('cuda', args...)` instead.
  scaler = torch.cuda.amp.GradScaler()
/u/ssoma1/mahdi/Torch-Pruning/scripts/finetune_pruned_resnet.py:48: FutureWarning: `torch.cuda.amp.GradScaler(args...)` is deprecated. Please use `torch.amp.GradScaler('cuda', args...)` instead.
  scaler = torch.cuda.amp.GradScaler()
/u/ssoma1/mahdi/Torch-Pruning/scripts/finetune_pruned_resnet.py:48: FutureWarning: `torch.cuda.amp.GradScaler(args...)` is deprecated. Please use `torch.amp.GradScaler('cuda', args...)` instead.
  scaler = torch.cuda.amp.GradScaler()
/u/ssoma1/mahdi/Torch-Pruning/scripts/finetune_pruned_resnet.py:48: FutureWarning: `torch.cuda.amp.GradScaler(args...)` is deprecated. Please use `torch.amp.GradScaler('cuda', args...)` instead.
  scaler = torch.cuda.amp.GradScaler()
/u/ssoma1/mahdi/Torch-Pruning/scripts/finetune_pruned_resnet.py:56: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.
  with torch.cuda.amp.autocast():
/u/ssoma1/mahdi/Torch-Pruning/scripts/finetune_pruned_resnet.py:56: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.
  with torch.cuda.amp.autocast():
/u/ssoma1/mahdi/Torch-Pruning/scripts/finetune_pruned_resnet.py:56: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.
  with torch.cuda.amp.autocast():
/u/ssoma1/mahdi/Torch-Pruning/scripts/finetune_pruned_resnet.py:56: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.
  with torch.cuda.amp.autocast():
[rank0]: Traceback (most recent call last):
[rank0]:   File "/u/ssoma1/mahdi/Torch-Pruning/scripts/finetune_pruned_resnet.py", line 69, in <module>
[rank0]:     main()
[rank0]:   File "/u/ssoma1/mahdi/Torch-Pruning/scripts/finetune_pruned_resnet.py", line 66, in main
[rank0]:     torch.save(model.module.state_dict(), ckpt_path)
[rank0]:   File "/u/ssoma1/.conda/envs/torchprune/lib/python3.10/site-packages/torch/serialization.py", line 849, in save
[rank0]:     with _open_zipfile_writer(f) as opened_zipfile:
[rank0]:   File "/u/ssoma1/.conda/envs/torchprune/lib/python3.10/site-packages/torch/serialization.py", line 716, in _open_zipfile_writer
[rank0]:     return container(name_or_buffer)
[rank0]:   File "/u/ssoma1/.conda/envs/torchprune/lib/python3.10/site-packages/torch/serialization.py", line 687, in __init__
[rank0]:     super().__init__(torch._C.PyTorchFileWriter(self.name))
[rank0]: RuntimeError: Parent directory output/finetuned/resnet50_l2 does not exist.
[rank0]:[W720 22:27:01.594711614 ProcessGroupNCCL.cpp:1250] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
W0720 22:27:03.438000 3924393 site-packages/torch/distributed/elastic/multiprocessing/api.py:897] Sending process 3924411 closing signal SIGTERM
W0720 22:27:03.440000 3924393 site-packages/torch/distributed/elastic/multiprocessing/api.py:897] Sending process 3924412 closing signal SIGTERM
W0720 22:27:03.440000 3924393 site-packages/torch/distributed/elastic/multiprocessing/api.py:897] Sending process 3924413 closing signal SIGTERM
E0720 22:27:03.565000 3924393 site-packages/torch/distributed/elastic/multiprocessing/api.py:869] failed (exitcode: 1) local_rank: 0 (pid: 3924410) of binary: /u/ssoma1/.conda/envs/torchprune/bin/python
Traceback (most recent call last):
  File "/u/ssoma1/.conda/envs/torchprune/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/u/ssoma1/.conda/envs/torchprune/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
  File "/u/ssoma1/.conda/envs/torchprune/lib/python3.10/site-packages/torch/distributed/run.py", line 923, in <module>
    main()
  File "/u/ssoma1/.conda/envs/torchprune/lib/python3.10/site-packages/torch/distributed/elastic/multiprocessing/errors/__init__.py", line 355, in wrapper
    return f(*args, **kwargs)
  File "/u/ssoma1/.conda/envs/torchprune/lib/python3.10/site-packages/torch/distributed/run.py", line 919, in main
    run(args)
  File "/u/ssoma1/.conda/envs/torchprune/lib/python3.10/site-packages/torch/distributed/run.py", line 910, in run
    elastic_launch(
  File "/u/ssoma1/.conda/envs/torchprune/lib/python3.10/site-packages/torch/distributed/launcher/api.py", line 138, in __call__
    return launch_agent(self._config, self._entrypoint, list(args))
  File "/u/ssoma1/.conda/envs/torchprune/lib/python3.10/site-packages/torch/distributed/launcher/api.py", line 269, in launch_agent
    raise ChildFailedError(
torch.distributed.elastic.multiprocessing.errors.ChildFailedError: 
============================================================
scripts/finetune_pruned_resnet.py FAILED
------------------------------------------------------------
Failures:
  <NO_OTHER_FAILURES>
------------------------------------------------------------
Root Cause (first observed failure):
[0]:
  time      : 2025-07-20_22:27:03
  host      : gpua048.delta.ncsa.illinois.edu
  rank      : 0 (local_rank: 0)
  exitcode  : 1 (pid: 3924410)
  error_file: <N/A>
  traceback : To enable traceback see: https://pytorch.org/docs/stable/elastic/errors.html
============================================================
